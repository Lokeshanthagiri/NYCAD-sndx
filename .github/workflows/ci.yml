name: NYCAD CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DEFAULT_SONAR_PROJECT_KEY: nycad-sndx

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fhv
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    # -------------------------
    # Backend
    # -------------------------
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run backend tests (placeholder)
      working-directory: ./backend
      run: |
        echo "Add backend tests here"
        # npm test

    - name: Run npm audit (backend)
      working-directory: ./backend
      run: npm audit --audit-level=high || true

    # -------------------------
    # Frontend
    # -------------------------
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Run npm audit (frontend)
      working-directory: ./frontend
      run: npm audit --audit-level=high || true

    # -------------------------
    # Build Docker images
    # -------------------------
    - name: Build backend image
      run: docker build -t nycad-backend:latest ./backend

    - name: Build frontend image
      run: docker build -t nycad-frontend:latest ./frontend

    # -------------------------
    # Trivy scanning (latest supported action)
    # -------------------------
    - name: Scan backend with Trivy
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: nycad-backend:latest
        format: table
        exit-code: 0
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        output: trivy-backend.txt

    - name: Scan frontend with Trivy
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: nycad-frontend:latest
        format: table
        exit-code: 0
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        output: trivy-frontend.txt

    - name: Upload Trivy backend report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-backend-report
        path: trivy-backend.txt

    - name: Upload Trivy frontend report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-frontend-report
        path: trivy-frontend.txt

    # -------------------------
    # SonarQube / SonarCloud scan
    # -------------------------
    - name: Prepare Sonar environment
      run: |
        echo "SONAR_HOST_URL=${{ secrets.SONAR_HOST_URL }}" >> $GITHUB_ENV
        echo "SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}" >> $GITHUB_ENV
        if [ -n "${{ secrets.SONAR_PROJECT_KEY }}" ]; then
          echo "SONAR_PROJECT_KEY=${{ secrets.SONAR_PROJECT_KEY }}" >> $GITHUB_ENV
        else
          echo "SONAR_PROJECT_KEY=${{ env.DEFAULT_SONAR_PROJECT_KEY }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ secrets.SONAR_ORGANIZATION }}" ]; then
          echo "SONAR_ORGANIZATION=${{ secrets.SONAR_ORGANIZATION }}" >> $GITHUB_ENV
        fi

    - name: Install SonarScanner CLI
      run: |
        curl -sSLo sonar-scanner.zip \
          https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip sonar-scanner.zip -d $HOME
        echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

    - name: Run SonarQube analysis
      env:
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: ${{ env.SONAR_PROJECT_KEY }}
        SONAR_ORGANIZATION: ${{ env.SONAR_ORGANIZATION }}
      run: |
        EXTRA_OPTS=""
        if [ -n "${SONAR_ORGANIZATION}" ]; then
          EXTRA_OPTS="-Dsonar.organization=${SONAR_ORGANIZATION}"
        fi
        sonar-scanner \
          -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
          -Dsonar.sources=backend,frontend \
          -Dsonar.host.url=${SONAR_HOST_URL} \
          -Dsonar.login=${SONAR_TOKEN} \
          $EXTRA_OPTS

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Check SonarQube Quality Gate
      env:
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: ${{ env.SONAR_PROJECT_KEY }}
      run: |
        echo "Polling SonarQube for quality gate status..."
        for i in $(seq 1 36); do
          result=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}")
          status=$(echo "$result" | jq -r '.projectStatus.status // empty')
          if [ -n "$status" ]; then
            echo "Sonar Quality Gate status: $status"
            if [ "$status" = "OK" ]; then
              exit 0
            else
              echo "Quality Gate failed with status: $status"
              echo "$result" | jq
              exit 1
            fi
          fi
          echo "Status not available yet (attempt $i). Retrying in 5s..."
          sleep 5
        done
        echo "Quality Gate status not available after timeout."
        exit 1